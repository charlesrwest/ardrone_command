"""autogenerated by genpy from ardrone_application_node/serialized_ardrone_command.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ardrone_application_node.msg

class serialized_ardrone_command(genpy.Message):
  _md5sum = "ffbcc12c7c708ba17b5a85205ec7941d"
  _type = "ardrone_application_node/serialized_ardrone_command"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#ROS message format doesn't support recursive definitions (a message type cannot contain more messages of the same type), so commands will have to be decomposed when they are serialized and will not be exactly the same on the other side
serialized_ardrone_command_part command
serialized_ardrone_command_part[] subcommands 


================================================================================
MSG: ardrone_application_node/serialized_ardrone_command_part
uint32 type
string[] strings
float64[] doubles
int64[] integers
uint32[] flightAnimations
uint32[] ledAnimations

"""
  __slots__ = ['command','subcommands']
  _slot_types = ['ardrone_application_node/serialized_ardrone_command_part','ardrone_application_node/serialized_ardrone_command_part[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       command,subcommands

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(serialized_ardrone_command, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.command is None:
        self.command = ardrone_application_node.msg.serialized_ardrone_command_part()
      if self.subcommands is None:
        self.subcommands = []
    else:
      self.command = ardrone_application_node.msg.serialized_ardrone_command_part()
      self.subcommands = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_I.pack(self.command.type))
      length = len(self.command.strings)
      buff.write(_struct_I.pack(length))
      for val1 in self.command.strings:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *val1))
        else:
          buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.command.doubles)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.command.doubles))
      length = len(self.command.integers)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(struct.pack(pattern, *self.command.integers))
      length = len(self.command.flightAnimations)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.pack(pattern, *self.command.flightAnimations))
      length = len(self.command.ledAnimations)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.pack(pattern, *self.command.ledAnimations))
      length = len(self.subcommands)
      buff.write(_struct_I.pack(length))
      for val1 in self.subcommands:
        buff.write(_struct_I.pack(val1.type))
        length = len(val1.strings)
        buff.write(_struct_I.pack(length))
        for val2 in val1.strings:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *val2))
          else:
            buff.write(struct.pack('<I%ss'%length, length, val2))
        length = len(val1.doubles)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.doubles))
        length = len(val1.integers)
        buff.write(_struct_I.pack(length))
        pattern = '<%sq'%length
        buff.write(struct.pack(pattern, *val1.integers))
        length = len(val1.flightAnimations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(struct.pack(pattern, *val1.flightAnimations))
        length = len(val1.ledAnimations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(struct.pack(pattern, *val1.ledAnimations))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.command is None:
        self.command = ardrone_application_node.msg.serialized_ardrone_command_part()
      if self.subcommands is None:
        self.subcommands = None
      end = 0
      start = end
      end += 4
      (self.command.type,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.command.strings = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.command.strings.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.command.doubles = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      end += struct.calcsize(pattern)
      self.command.integers = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.command.flightAnimations = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.command.ledAnimations = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.subcommands = []
      for i in range(0, length):
        val1 = ardrone_application_node.msg.serialized_ardrone_command_part()
        start = end
        end += 4
        (val1.type,) = _struct_I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.strings = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.strings.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.doubles = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sq'%length
        start = end
        end += struct.calcsize(pattern)
        val1.integers = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        end += struct.calcsize(pattern)
        val1.flightAnimations = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        end += struct.calcsize(pattern)
        val1.ledAnimations = struct.unpack(pattern, str[start:end])
        self.subcommands.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_I.pack(self.command.type))
      length = len(self.command.strings)
      buff.write(_struct_I.pack(length))
      for val1 in self.command.strings:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *val1))
        else:
          buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.command.doubles)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.command.doubles.tostring())
      length = len(self.command.integers)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(self.command.integers.tostring())
      length = len(self.command.flightAnimations)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.command.flightAnimations.tostring())
      length = len(self.command.ledAnimations)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.command.ledAnimations.tostring())
      length = len(self.subcommands)
      buff.write(_struct_I.pack(length))
      for val1 in self.subcommands:
        buff.write(_struct_I.pack(val1.type))
        length = len(val1.strings)
        buff.write(_struct_I.pack(length))
        for val2 in val1.strings:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *val2))
          else:
            buff.write(struct.pack('<I%ss'%length, length, val2))
        length = len(val1.doubles)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.doubles.tostring())
        length = len(val1.integers)
        buff.write(_struct_I.pack(length))
        pattern = '<%sq'%length
        buff.write(val1.integers.tostring())
        length = len(val1.flightAnimations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(val1.flightAnimations.tostring())
        length = len(val1.ledAnimations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(val1.ledAnimations.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.command is None:
        self.command = ardrone_application_node.msg.serialized_ardrone_command_part()
      if self.subcommands is None:
        self.subcommands = None
      end = 0
      start = end
      end += 4
      (self.command.type,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.command.strings = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.command.strings.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.command.doubles = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      end += struct.calcsize(pattern)
      self.command.integers = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.command.flightAnimations = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.command.ledAnimations = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.subcommands = []
      for i in range(0, length):
        val1 = ardrone_application_node.msg.serialized_ardrone_command_part()
        start = end
        end += 4
        (val1.type,) = _struct_I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.strings = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.strings.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.doubles = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sq'%length
        start = end
        end += struct.calcsize(pattern)
        val1.integers = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        end += struct.calcsize(pattern)
        val1.flightAnimations = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        end += struct.calcsize(pattern)
        val1.ledAnimations = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
        self.subcommands.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
