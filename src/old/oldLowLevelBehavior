 
if(controlEngineIsDisabled || onTheGroundWithMotorsOff || emergencyStopTriggered || shutdownEngineControl)
{
printf("No control %d %d %d\n", controlEngineIsDisabled,  onTheGroundWithMotorsOff, emergencyStopTriggered);
return; //Return if we shouldn't be trying to fly
}

double zThrottle = 0.0;
if(maintainAltitude)
{
double pTerm = (targetAltitude - fabs(altitude));
targetAltitudeITerm = targetAltitudeITerm + pTerm;

zThrottle = pTerm/600.0 + targetAltitudeITerm/100000000.0; //PI control for altitude

//printf("Altitude values: target: %.1lf Current: %.1lf Diff: %.1lf throt:  %.1lf I:%.1lf\n", targetAltitude, altitude, targetAltitude -altitude, zThrottle, targetAltitudeITerm); 
}

if(trackedTags.size() > 0)
{
//printf("I see %ld tags\n", trackedTags.size());
double xCoordinate = trackedTags[0].xCoordinate;
double yCoordinate = trackedTags[0].yCoordinate;
printf("XCoordinate: %.2lf  YCoordinate: %.2lf\n", xCoordinate, yCoordinate);
}

double xThrottle = xHeading;
double yThrottle = yHeading;
if(homeInOnTag && trackedTags.size() > 0)
{
//Override heading values if there is a tag to follow
//(xCoordinate maxs at +-1000, so throttle should max at +-.1)
double xCoordinate = trackedTags[0].xCoordinate-500.0;
double yCoordinate = -(trackedTags[0].yCoordinate-500.0);
xCoordinateITerm = xCoordinateITerm + xCoordinate/10000000.0;
yCoordinateITerm = yCoordinateITerm + yCoordinate/10000000.0;

printf("XCoordinate: %.2lf  YCoordinate: %.2lf XCoordinateI: %.2lf  YCoordinateI: %.2lf\n\n", xCoordinate, yCoordinate, xCoordinateITerm, yCoordinateITerm);

//X: Tag is right = high positive
//Y: Tag is back = high positive

if(xCoordinate > 1000)
{
xCoordinate = 1000;
}
if(xCoordinate < -1000)
{
xCoordinate = -1000;
}

if(yCoordinate > 1000)
{
yCoordinate = 1000;
}
if(yCoordinate < -1000)
{
yCoordinate = -1000;
}



xThrottle = yCoordinate/3500.0;// + yCoordinateITerm/500.0; //Simple P control for now
//(yCoordinate maxs at +-1000, so throttle should max at +-.1)
yThrottle = xCoordinate/3500.0; //+ xCoordinateITerm/500.0; //Simple P control for now
//yThrottle = 0;
printf("Applying x:%.2lf y:%.2lf\n", xThrottle, yThrottle);
}

double zRotationThrottle = currentAngularVelocitySetting;
if(matchTagOrientation)
{
//Override angular velocity setting to track tag orientation
zRotationThrottle = trackedTags[0].orientation / 180; //Might need offset and other configuration
}


if(controlEngineIsDisabled || onTheGroundWithMotorsOff || emergencyStopTriggered || shutdownEngineControl)
{
printf("No control %d %d %d\n", controlEngineIsDisabled,  onTheGroundWithMotorsOff, emergencyStopTriggered);
return; //Return if we shouldn't be trying to fly
}

double zThrottle = 0.0;
if(maintainAltitude)
{
double pTerm = (targetAltitude - fabs(altitude));
targetAltitudeITerm = targetAltitudeITerm + pTerm;

zThrottle = pTerm/600.0 + targetAltitudeITerm/100000000.0; //PI control for altitude

//printf("Altitude values: target: %.1lf Current: %.1lf Diff: %.1lf throt:  %.1lf I:%.1lf\n", targetAltitude, altitude, targetAltitude -altitude, zThrottle, targetAltitudeITerm); 
}

if(trackedTags.size() > 0)
{
//printf("I see %ld tags\n", trackedTags.size());
double xCoordinate = trackedTags[0].xCoordinate;
double yCoordinate = trackedTags[0].yCoordinate;
printf("XCoordinate: %.2lf  YCoordinate: %.2lf\n", xCoordinate, yCoordinate);
}

double xThrottle = xHeading;
double yThrottle = yHeading;
if(homeInOnTag && trackedTags.size() > 0)
{
//Override heading values if there is a tag to follow
//(xCoordinate maxs at +-1000, so throttle should max at +-.1)
double xCoordinate = trackedTags[0].xCoordinate-500.0;
double yCoordinate = -(trackedTags[0].yCoordinate-500.0);
xCoordinateITerm = xCoordinateITerm + xCoordinate/10000000.0;
yCoordinateITerm = yCoordinateITerm + yCoordinate/10000000.0;

printf("XCoordinate: %.2lf  YCoordinate: %.2lf XCoordinateI: %.2lf  YCoordinateI: %.2lf\n\n", xCoordinate, yCoordinate, xCoordinateITerm, yCoordinateITerm);

//X: Tag is right = high positive
//Y: Tag is back = high positive

if(xCoordinate > 1000)
{
xCoordinate = 1000;
}
if(xCoordinate < -1000)
{
xCoordinate = -1000;
}

if(yCoordinate > 1000)
{
yCoordinate = 1000;
}
if(yCoordinate < -1000)
{
yCoordinate = -1000;
}



xThrottle = yCoordinate/3500.0;// + yCoordinateITerm/500.0; //Simple P control for now
//(yCoordinate maxs at +-1000, so throttle should max at +-.1)
yThrottle = xCoordinate/3500.0; //+ xCoordinateITerm/500.0; //Simple P control for now
//yThrottle = 0;
printf("Applying x:%.2lf y:%.2lf\n", xThrottle, yThrottle);
}

double zRotationThrottle = currentAngularVelocitySetting;
if(matchTagOrientation)
{
//Override angular velocity setting to track tag orientation
zRotationThrottle = trackedTags[0].orientation / 180; //Might need offset and other configuration
}


//Unlock while sending ROS message
inputLockedUniqueLock.unlock();

//Tell the drone how it should move
setVelocityAndRotation(xThrottle, yThrottle, zThrottle, zRotationThrottle);

SOM_TRY
inputLockedUniqueLock.lock();
SOM_CATCH("Error relocking mutex\n")
//Unlock while sending ROS message
inputLockedUniqueLock.unlock();

//Tell the drone how it should move
setVelocityAndRotation(xThrottle, yThrottle, zThrottle, zRotationThrottle);

SOM_TRY
inputLockedUniqueLock.lock();
SOM_CATCH("Error relocking mutex\n")
